struct Segtree{
    #define lc(x) (tr[x].ls)
    #define rc(x) (tr[x].rs)
    int idx = 0,L,R;
    vector<int> root;
    struct node{
        int ls,rs;
        int val;
    }tr[maxn*32];
    void init(int l,int r){
        L = l,R = r;
        idx = 0;
        root.clear();
        root.push_back(build(l,r));
    }
    int build(int l,int r){
        int p = ++idx;
        if(l == r) return p;
        int mid = (l+r) >> 1;
        tr[p].ls = build(l,mid),tr[p].rs = build(mid+1,r);
        return p;
    }
    
    int insert(int p,int l,int r,int x){
        int q = ++idx;
        tr[q] = tr[p];
        if(l == r){
            tr[q].val++;
            return q; 
        }
        int mid = (l+r) >> 1;
        if(x <= mid) tr[q].ls = insert(tr[p].ls,l,mid,x);
        else tr[q].rs = insert(tr[p].rs,mid+1,r,x);
        tr[q].val = tr[lc(q)].val + tr[rc(q)].val;
        return q;
    }
    void insert(int x){
        root.push_back(insert(root.back(),L,R,x));
    }
    int query(int p,int q,int l,int r,int k){
        if(l == r) return l; 
        int val = tr[lc(q)].val - tr[lc(p)].val;
        int mid = (l+r)>>1;
        if(val >= k) return query(lc(p),lc(q),l,mid,k);
        else return query(rc(p),rc(q),mid+1,r,k-val);
    }
    int query(int l,int r,int k){
        return query(root[l-1],root[r],L,R,k);
    }
    #undef lc
    #undef rc
};