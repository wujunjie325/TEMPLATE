template <int mod>
unsigned int down(unsigned int x){
    return x >= mod ? x - mod : x;
}
template <int mod>
struct Modint{
    unsigned int x;
    Modint() = default;
    Modint(unsigned int x) : x(x) {}
    friend istream &operator>>(istream &in, Modint &a) { return in >> a.x; }
    friend ostream &operator<<(ostream &out, Modint a) { return out << a.x; }
    friend Modint operator+(Modint a, Modint b) { return down<mod>(a.x + b.x); }
    friend Modint operator-(Modint a, Modint b) { return down<mod>(a.x - b.x + mod); }
    friend Modint operator*(Modint a, Modint b) { return 1ULL * a.x * b.x % mod; }
    friend Modint operator/(Modint a, Modint b) { return a * ~b; }
    friend Modint operator^(Modint a, int b){
        Modint ans = 1;
        for (; b; b >>= 1, a *= a)
            if (b & 1)
                ans *= a;       
        return ans;
    }
    friend Modint operator~(Modint a) { return a ^ (mod - 2); }
    friend Modint operator-(Modint a) { return down<mod>(mod - a.x); }
    friend Modint &operator+=(Modint &a, Modint b) { return a = a + b; }
    friend Modint &operator-=(Modint &a, Modint b) { return a = a - b; }
    friend Modint &operator*=(Modint &a, Modint b) { return a = a * b; }
    friend Modint &operator/=(Modint &a, Modint b) { return a = a / b; }
    friend Modint &operator^=(Modint &a, int b) { return a = a ^ b; }
    friend Modint &operator++(Modint &a) { return a += 1; }
    friend Modint operator++(Modint &a, int){
        Modint x = a;
        a += 1;
        return x;
    }
    friend Modint &operator--(Modint &a) { return a -= 1; }
    friend Modint operator--(Modint &a, int){
        Modint x = a;
        a -= 1;
        return x;
    }
    friend bool operator==(Modint a, Modint b) { return a.x == b.x; }
    friend bool operator!=(Modint a, Modint b) { return !(a == b); }
};
typedef Modint<998244353> mint;
struct FWT{
    int extend(int n) {
        int N = 1;
        for (; N < n; N <<= 1);
        return N;
    }
    void FWTor(vector<mint> &a, bool rev) {
        int n = a.size();
        for (int l = 2, m = 1; l <= n; l <<= 1, m <<= 1) {
            for (int j = 0; j < n; j += l) for (int i = 0; i < m; i++) {
                if (!rev) a[i + j + m] += a[i + j];
                else a[i + j + m] -= a[i + j];
            }
        }
    }
    void FWTand(vector<mint> &a, bool rev) {
        int n = a.size();
        for (int l = 2, m = 1; l <= n; l <<= 1, m <<= 1) {
            for (int j = 0; j < n; j += l) for (int i = 0; i < m; i++) {
                if (!rev) a[i + j] += a[i + j + m];
                else a[i + j] -= a[i + j + m];
            }
        }
    }
    void FWTxor(std::vector<mint> &a, bool rev) {
        int n = a.size();
        for (int l = 2, m = 1; l <= n; l <<= 1, m <<= 1) {
            for (int j = 0; j < n; j += l) for (int i = 0; i < m; i++) {
                mint x = a[i + j], y = a[i + j + m];
                if (!rev) {
                    a[i + j] = (x + y);
                    a[i + j + m] = (x - y) ;
                } else {
                    a[i + j] = (x + y) / 2;
                    a[i + j + m] = (x - y) / 2;
                }
            }
        }
    }
    vector<mint> Or(vector<mint> a1,vector<mint> a2) {
        int n = max(a1.size(), a2.size()), N = extend(n);
        a1.resize(N), FWTor(a1, false);
        a2.resize(N), FWTor(a2, false);
        vector<mint> A(N);
        for (int i = 0; i < N; i++) A[i] = a1[i] * a2[i];
        FWTor(A, true);
        return A;
    }
    vector<mint> And(vector<mint> a1, vector<mint> a2) {
        int n = max(a1.size(), a2.size()), N = extend(n);
        a1.resize(N), FWTand(a1, false);
        a2.resize(N), FWTand(a2, false);
        vector<mint> A(N);
        for (int i = 0; i < N; i++) A[i] = a1[i] * a2[i];
        FWTand(A, true);
        return A;
    }
    vector<mint> Xor(vector<mint> a1, vector<mint> a2) {
        int n = max(a1.size(), a2.size()), N = extend(n);
        a1.resize(N), FWTxor(a1, false);
        a2.resize(N), FWTxor(a2, false);
        vector<mint> A(N);
        for (int i = 0; i < N; i++) A[i] = a1[i] * a2[i];
        FWTxor(A, true);
        return A;
    }
}fwt;